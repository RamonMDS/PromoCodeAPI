// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PromoCodeAPI.Infra.Context;

namespace PromoCodeAPI.Migrations
{
    [DbContext(typeof(ContextSqlLite))]
    partial class ContextSqlLiteModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("PromoCodeAPI.Domain.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("PromoCodeAPI.Domain.Entities.PromoCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<int>("PromotionId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("PromotionId");

                    b.ToTable("PromoCodes");
                });

            modelBuilder.Entity("PromoCodeAPI.Domain.Entities.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("DiscountValue");

                    b.Property<string>("Name");

                    b.Property<int>("PromotionType");

                    b.HasKey("Id");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("PromoCodeAPI.Domain.Entities.ShoppingCart", b =>
                {
                    b.Property<Guid>("_id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int>("MovieId");

                    b.Property<int>("TheatreId");

                    b.Property<decimal>("TotalPrice");

                    b.HasKey("_id");

                    b.HasIndex("MovieId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("PromoCodeAPI.Domain.Entities.Theatre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Theatres");
                });

            modelBuilder.Entity("PromoCodeAPI.Domain.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<decimal>("Price");

                    b.Property<Guid>("ShoppingCartId");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("PromoCodeAPI.Domain.Entities.PromoCode", b =>
                {
                    b.HasOne("PromoCodeAPI.Domain.Entities.Promotion", "Promotion")
                        .WithMany("Codes")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PromoCodeAPI.Domain.Entities.ShoppingCart", b =>
                {
                    b.HasOne("PromoCodeAPI.Domain.Entities.Movie", "Movie")
                        .WithOne("Cart")
                        .HasForeignKey("PromoCodeAPI.Domain.Entities.ShoppingCart", "MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PromoCodeAPI.Domain.Entities.Theatre", "Theatre")
                        .WithOne("Cart")
                        .HasForeignKey("PromoCodeAPI.Domain.Entities.ShoppingCart", "MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PromoCodeAPI.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("PromoCodeAPI.Domain.Entities.ShoppingCart", "Cart")
                        .WithMany("Tickets")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
